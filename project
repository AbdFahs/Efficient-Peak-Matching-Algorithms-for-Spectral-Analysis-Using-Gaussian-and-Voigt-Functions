import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import minimize
from scipy.signal import find_peaks, convolve
from scipy.special import voigt_profile

# Function to generate sharp peaks with varying values
def generate_varying_peaks(x, num_peaks):
    peaks = np.random.uniform(0, 20, num_peaks)  # Peak positions
    amplitudes = np.random.uniform(1, 2, num_peaks)  # Random amplitudes
    varying_peaks = np.zeros_like(x)
    for peak_value, amplitude in zip(peaks, amplitudes):
        varying_peaks += amplitude * np.exp(-(x - peak_value)**2 / 0.1)
    return varying_peaks

# function to recreate the spectrum
def recreate_spectrum(x, x_values_B, y_values_B):
    recreated_spectrum = np.zeros_like(x)
    for peak_value, amplitude in zip(x_values_B, y_values_B):
        recreated_spectrum += amplitude * np.exp(-(x - peak_value)**2 / 0.1)
    return recreated_spectrum

# Gaussian function for fitting
def gaussian(x, μ, σ, A):
    return A * np.exp(-(x - μ)**2 / (2 * σ**2))

# Voigt function for fitting
def voigt(x, x0, sigma, gamma, A):
    return A * voigt_profile(x - x0, sigma, gamma)

# Function to find and plot peaks
def plot_peaks(x, y, ax, color='red', label='Detected Peaks'):
    peaks, _ = find_peaks(y, height=0.5)
    peak_coordinates = list(zip(x[peaks], y[peaks]))
    ax.plot(x[peaks], y[peaks], 'x', color=color, label=label)

    ax.set_xlabel('Wavenumber (m^-1)')
    ax.set_ylabel('Intensity')
    return peak_coordinates



# Function to remove noise
def remove_noise(spectrum, window_size=51):
    # Apply a moving average filter to smooth the spectrum
    smoothed_spectrum = convolve(spectrum, np.ones(window_size) / window_size, mode='same')
    return smoothed_spectrum



# Generate Spectrum A with 10 sharp peaks varying in value
x_data_A = np.linspace(0, 20, 1000)
spectrum_A = generate_varying_peaks(x_data_A, num_peaks=10)

# Fit Gaussian function to Spectrum A using minimize
initial_guess_A_gaussian = [10, 1, 10]
result_A_gaussian = minimize(lambda params, x, y: np.sum((y - gaussian(x, *params))**2), initial_guess_A_gaussian, args=(x_data_A, spectrum_A), method='Nelder-Mead')
popt_gaussian_A = result_A_gaussian.x

# Fit Voigt function to Spectrum A using minimize
initial_guess_A_voigt = [10, 1, 1, 10]
result_A_voigt = minimize(lambda params, x, y: np.sum((y - voigt(x, *params))**2), initial_guess_A_voigt, args=(x_data_A, spectrum_A), method='Nelder-Mead')
popt_voigt_A = result_A_voigt.x

# Generate Spectrum B with a random shift between 2.5 and 5 on the x-axis and more variation in peak positions
random_shift_B = np.random.uniform(1, 5)
varying_positions_B = np.random.uniform(-1, 1, 5)  # Random variations in peak positions
spectrum_B = generate_varying_peaks(x_data_A - random_shift_B, num_peaks=10)
for i in range(5):
    spectrum_B += generate_varying_peaks(x_data_A - random_shift_B + varying_positions_B[i], num_peaks=1)

# Fit Gaussian function to Spectrum B using minimize
initial_guess_B_gaussian = [10, 1, 10]
result_B_gaussian = minimize(lambda params, x, y: np.sum((y - gaussian(x, *params))**2), initial_guess_B_gaussian, args=(x_data_A, spectrum_B), method='Nelder-Mead')
popt_gaussian_B = result_B_gaussian.x

# Fit Voigt function to Spectrum B using minimize
initial_guess_B_voigt = [10, 1, 1, 10]
result_B_voigt = minimize(lambda params, x, y: np.sum((y - voigt(x, *params))**2), initial_guess_B_voigt, args=(x_data_A, spectrum_B), method='Nelder-Mead')
popt_voigt_B = result_B_voigt.x

# Print Gaussian function parameters for Spectrum A
print("Parameters for Gaussian Function A:")
print("μ_A:", popt_gaussian_A[0])
print("σ_A:", popt_gaussian_A[1])
print("A_A:", popt_gaussian_A[2])
print()

# Print Voigt function parameters for Spectrum A
print("Parameters for Voigt Function A:")
print("x0_A:", popt_voigt_A[0])
print("σ_A:", popt_voigt_A[1])
print("γ_A:", popt_voigt_A[2])
print("A_A:", popt_voigt_A[3])
print()

# Print Gaussian function parameters for Spectrum B
print("Parameters for Gaussian Function B:")
print("μ_B:", popt_gaussian_B[0])
print("σ_B:", popt_gaussian_B[1])
print("A_B:", popt_gaussian_B[2])
print()

# Print Voigt function parameters for Spectrum B
print("Parameters for Voigt Function B:")
print("x0_B:", popt_voigt_B[0])
print("σ_B:", popt_voigt_B[1])
print("γ_B:", popt_voigt_B[2])
print("A_B:", popt_voigt_B[3])
print()

# Get peak coordinates for Spectrum A
peak_coordinates_A = plot_peaks(x_data_A, spectrum_A, plt.gca(), color='red', label='Detected Peaks A')
print("Peak Coordinates for Spectrum A:")
print(peak_coordinates_A)

# Find x and y alone for A and B
x_values_A, y_values_A = zip(*peak_coordinates_A)

# Get peak coordinates for Spectrum B
peak_coordinates_B = plot_peaks(x_data_A, spectrum_B, plt.gca(), color='blue', label='Detected Peaks B')

print("Peak Coordinates for Spectrum B:")
print(peak_coordinates_B)
x_values_B, y_values_B = zip(*peak_coordinates_B)

# Plotting
plt.figure(figsize=(12, 10))

# Plot Spectrum A with Detected Peaks and Gaussian/Voigt functions
plt.subplot(2, 1, 1)
plt.plot(x_data_A, spectrum_A, label='Spectrum A')
plot_peaks(x_data_A, spectrum_A, plt.gca(), color='red', label='Detected Peaks A')
plt.plot(x_data_A, gaussian(x_data_A, *popt_gaussian_A), '--', label='Fitted Gaussian Function A')
plt.plot(x_data_A, voigt(x_data_A, *popt_voigt_A), '--', label='Fitted Voigt Function A')
plt.xlabel('Wavenumber (m^-1) \n \n')
plt.ylabel('Intensity')
plt.legend()
plt.title('Spectrum A with Detected Peaks A and Fitted Functions')

# Plot Spectrum B with Detected Peaks and Gaussian/Voigt functions
plt.subplot(2, 1, 2)
plt.plot(x_data_A, spectrum_B, label='Spectrum B (Shift = {:.2f})'.format(random_shift_B))
plot_peaks(x_data_A, spectrum_B, plt.gca(), color='blue', label='Detected Peaks B')
plt.plot(x_data_A, gaussian(x_data_A, *popt_gaussian_B), '--', label='Fitted Gaussian Function B')
plt.plot(x_data_A, voigt(x_data_A, *popt_voigt_B), '--', label='Fitted Voigt Function B')
plt.xlabel('Wavenumber (m^-1) \n \n')
plt.ylabel('Intensity')
plt.legend()
plt.title('Spectrum B with Detected Peaks B and Fitted Functions')

plt.tight_layout()
plt.show()

# Plot Gaussian functions of Spectrum A and Spectrum B in a single graph
plt.figure(num=3,figsize=(8, 6))

# Plot Gaussian function for Spectrum A
plt.plot(x_data_A, gaussian(x_data_A, *popt_gaussian_A), '--', label='Fitted Gaussian Function A')

# Plot Gaussian function for Spectrum B
plt.plot(x_data_A, gaussian(x_data_A, *popt_gaussian_B), '--', label='Fitted Gaussian Function B')

plt.xlabel('Wavenumber (m^-1)')
plt.ylabel('Intensity')
plt.legend()
plt.title('Fitted Gaussian Functions for Spectrum A and Spectrum B')

plt.tight_layout()
plt.show()

# Plot the discrete peak data for A
plt.scatter(x_values_A, y_values_A, label='Detected Peaks A')
# Plot the discrete peak data for B
plt.scatter(x_values_B, y_values_B, label='Detected Peaks B', marker='x')

plt.xlabel('Wavenumber (m^-1)')
plt.ylabel('Intensity')
plt.title('Detected Peaks A and B')

# Fit the discrete Voigt function to the peak data for A
result_A_voigt_discrete = minimize(lambda params, x, y: np.sum((y - voigt(x, *params))**2), initial_guess_A_voigt, args=(x_values_A, y_values_A), method='Nelder-Mead')
params_A_voigt_discrete = result_A_voigt_discrete.x

# Fit the discrete Voigt function to the peak data for B
result_B_voigt_discrete = minimize(lambda params, x, y: np.sum((y - voigt(x, *params))**2), initial_guess_B_voigt, args=(x_values_B, y_values_B), method='Nelder-Mead')
params_B_voigt_discrete = result_B_voigt_discrete.x

# Plot the fitted discrete Voigt functions for A
x_fit_A_voigt = np.linspace(min(x_values_A), max(x_values_A), 100)
y_fit_A_voigt = voigt(x_fit_A_voigt, *params_A_voigt_discrete)

plt.plot(x_fit_A_voigt, y_fit_A_voigt, label='Fitted Voigt A')

# Plot the fitted discrete Voigt functions for B
x_fit_B_voigt = np.linspace(min(x_values_B), max(x_values_B), 100)
y_fit_B_voigt = voigt(x_fit_B_voigt, *params_B_voigt_discrete)
plt.plot(x_fit_B_voigt, y_fit_B_voigt, label='Fitted Voigt B')

plt.legend()
plt.show()

# Display the fitted parameters for A (Voigt)
print("Fitted Parameters for A (Voigt):")
print(f"Center: {params_A_voigt_discrete[0]:.4f}")
print(f"Sigma (Gaussian): {params_A_voigt_discrete[1]:.4f}")
print(f"Gamma (Lorentzian): {params_A_voigt_discrete[2]:.4f}")
print(f"Amplitude: {params_A_voigt_discrete[3]:.4f}")

# Display the fitted parameters for B (Voigt)
print("\nFitted Parameters for B (Voigt):")
print(f"Center: {params_B_voigt_discrete[0]:.4f}")
print(f"Sigma (Gaussian): {params_B_voigt_discrete[1]:.4f}")
print(f"Gamma (Lorentzian): {params_B_voigt_discrete[2]:.4f}")
print(f"Amplitude: {params_B_voigt_discrete[3]:.4f}")

# Plot the discrete peak data for A
plt.scatter(x_values_A, y_values_A, label='Detected Peaks A')
# Plot the discrete peak data for B
plt.scatter(x_values_B, y_values_B, label='Detected Peaks B', marker='x')

plt.xlabel('Wavenumber (m^-1)')
plt.ylabel('Intensity')
plt.title('Detected Peaks A and B')

# Fit the discrete Gaussian function to the peak data for A
result_A_gaussian_discrete = minimize(lambda params, x, y: np.sum((y - gaussian(x, *params))**2), initial_guess_A_gaussian, args=(x_values_A, y_values_A), method='Nelder-Mead')
params_A_gaussian_discrete = result_A_gaussian_discrete.x

# Fit the discrete Gaussian function to the peak data for B
result_B_gaussian_discrete = minimize(lambda params, x, y: np.sum((y - gaussian(x, *params))**2), initial_guess_B_gaussian, args=(x_values_B, y_values_B), method='Nelder-Mead')
params_B_gaussian_discrete = result_B_gaussian_discrete.x

# Plot the fitted discrete Gaussian functions for A
x_fit_A = np.linspace(min(x_values_A), max(x_values_A), 100)
y_fit_A = gaussian(x_fit_A, *params_A_gaussian_discrete)
plt.plot(x_fit_A, y_fit_A, label='Fitted Gaussian A')

# Plot the fitted discrete Gaussian functions for B
x_fit_B = np.linspace(min(x_values_B), max(x_values_B), 100)
y_fit_B = gaussian(x_fit_B, *params_B_gaussian_discrete)
plt.plot(x_fit_B, y_fit_B, label='Fitted Gaussian B')

plt.legend()
plt.show()

# Display the fitted parameters for A (Gaussian)
print("Fitted Parameters for A (Gaussian):")
print(f"Mean: {params_A_gaussian_discrete[0]:.4f}")
print(f"Standard Deviation: {params_A_gaussian_discrete[1]:.4f}")
print(f"Amplitude: {params_A_gaussian_discrete[2]:.4f}")

# Display the fitted parameters for B (Gaussian)
print("\nFitted Parameters for B (Gaussian):")
print(f"Mean: {params_B_gaussian_discrete[0]:.4f}")
print(f"Standard Deviation: {params_B_gaussian_discrete[1]:.4f}")
print(f"Amplitude: {params_B_gaussian_discrete[2]:.4f}")





# Get peak coordinates for Spectrum A
peak_coordinates_A = plot_peaks(x_data_A, spectrum_A, plt.gca(), color='red', label='Detected Peaks A')
print("Peak Coordinates for Spectrum A:")
print(peak_coordinates_A)

# Get peak coordinates for Spectrum B
peak_coordinates_B = plot_peaks(x_data_A, spectrum_B, plt.gca(), color='blue', label='Detected Peaks B')
print("Peak Coordinates for Spectrum B:")
print(peak_coordinates_B)
# second algorithm which is getting the gaussian value for every peak
x_values_A, y_values_A = zip(*peak_coordinates_A)
x_values_B, y_values_B = zip(*peak_coordinates_B)
saved_x_values_B = x_values_B
saved_y_values_B = y_values_B



#gaussian

gaussian_values_A = gaussian(x_values_A, *popt_gaussian_A)
gaussian_values_B = gaussian(x_values_B, *popt_gaussian_B)

nearest_points_A = []
nearest_points_B = []

# Create a list to track matched points from set B
matched_points_B = [False] * len(x_values_B)

for x_peak_A, y_peak_A, gaussian_value_A in zip(x_values_A, y_values_A, gaussian_values_A):
    min_distance = float('inf')
    nearest_x_peak_B = None
    nearest_y_peak_B = None
    nearest_gaussian_value_B = None
    matched_index = None

    for i, (x_peak_B, y_peak_B, gaussian_value_B) in enumerate(zip(x_values_B, y_values_B, gaussian_values_B)):
        if matched_points_B[i]:
            continue  # Skip matched points
        distance = abs(gaussian_value_A - gaussian_value_B)
        if distance < min_distance:
            min_distance = distance
            nearest_x_peak_B = x_peak_B
            nearest_y_peak_B = y_peak_B
            nearest_gaussian_value_B = gaussian_value_B
            matched_index = i

    nearest_points_A.append((x_peak_A, y_peak_A, gaussian_value_A))
    nearest_points_B.append((nearest_x_peak_B, nearest_y_peak_B, nearest_gaussian_value_B))
    matched_points_B[matched_index] = True  # Mark the matched point from set B

print("Print nearest points for each peak in A and B")
for i, (point_A, point_B) in enumerate(zip(nearest_points_A, nearest_points_B), start=1):
    print(f"Point {i} - A: {point_A}, B: {point_B}")


# Initialize vectors C and D
C = []
D = []

# Print nearest points for each peak in A and B
print(f"Print nearest points for each peak in A and B")
for i, (point_A, point_B) in enumerate(zip(nearest_points_A, nearest_points_B), start=1):
    print(f"Point {i} - A: {point_A}, B: {point_B}")
    x_A, _, _ = point_A
    x_B, _, _ = point_B
    C.append(x_A)
    D.append(x_B)

# Print vectors C and D

D = C
x_values_A = np.array(C)
x_values_B = np.array(D)





# Initialize vectors C and D for y-axis
C_y = []
D_y = []
print(f"Print nearest points for each peak in A and B using gaussian")
# Print nearest points for each peak in A and B
for i, (point_A, point_B) in enumerate(zip(nearest_points_A, nearest_points_B), start=1):
    print(f"Point {i} - A: {point_A}, B: {point_B}")
    _, y_A, _ = point_A
    _, y_B, _ = point_B
    C_y.append(y_A)
    D_y.append(y_B)

# Print vectors C and D for y-axis
print("Vector C_y:", C_y)
print("Vector D_y:", D_y)
y_values_A = np.array(C_y)
y_values_B = np.array(D_y)

print("x coordinates of spectrum A peaks :", C)
print("x coordinates of spectrum B peaks :", D)

recreated_spectrum = recreate_spectrum(x_data_A, x_values_B, y_values_B)



# Plotting the recreated_spectrum and spectrum_A together with the scatter plot
plt.figure(figsize=(8, 6))

# Plot recreated_spectrum
plt.plot(x_data_A, recreated_spectrum, label='New spectrum B', color='green')

# Plot spectrum_A
plt.plot(x_data_A, spectrum_A, label='Spectrum A', color='orange')

# Plot points formed by x_values_A and y_values_A
plt.scatter(x_values_A, y_values_A, label='A', color='red')

# Plot points formed by x_values_B and y_values_B
plt.scatter(x_values_B, y_values_B, label='B', color='blue')

plt.xlabel('Wavenumber (m^-1)')
plt.ylabel('Intensity')
plt.title('Points A and B and Spectra')
plt.legend()
plt.show()

# gaussian function approach
x_values_B = saved_x_values_B
y_values_B = saved_y_values_B


#voigt
gaussian_values_A = voigt(x_values_A, *popt_voigt_A)
gaussian_values_B = voigt(x_values_B, *popt_voigt_B)

nearest_points_A = []
nearest_points_B = []

# Create a list to track matched points from set B
matched_points_B = [False] * len(x_values_B)

for x_peak_A, y_peak_A, gaussian_value_A in zip(x_values_A, y_values_A, gaussian_values_A):
    min_distance = float('inf')
    nearest_x_peak_B = None
    nearest_y_peak_B = None
    nearest_gaussian_value_B = None
    matched_index = None

    for i, (x_peak_B, y_peak_B, gaussian_value_B) in enumerate(zip(x_values_B, y_values_B, gaussian_values_B)):
        if matched_points_B[i]:
            continue  # Skip matched points
        distance = abs(gaussian_value_A - gaussian_value_B)
        if distance < min_distance:
            min_distance = distance
            nearest_x_peak_B = x_peak_B
            nearest_y_peak_B = y_peak_B
            nearest_gaussian_value_B = gaussian_value_B
            matched_index = i

    nearest_points_A.append((x_peak_A, y_peak_A, gaussian_value_A))
    nearest_points_B.append((nearest_x_peak_B, nearest_y_peak_B, nearest_gaussian_value_B))
    matched_points_B[matched_index] = True  # Mark the matched point from set B

print("Print nearest points for each peak in A and B using voigt")
for i, (point_A, point_B) in enumerate(zip(nearest_points_A, nearest_points_B), start=1):
    print(f"voigt Point {i} - A: {point_A}, B: {point_B}")



# Initialize vectors C and D
C = []
D = []

# Print nearest points for each peak in A and B
print(f"Print nearest points for each peak in A and B using voigt")
for i, (point_A, point_B) in enumerate(zip(nearest_points_A, nearest_points_B), start=1):
    print(f"voigt Point {i} - A: {point_A}, B: {point_B}")
    x_A, _, _ = point_A
    x_B, _, _ = point_B
    C.append(x_A)
    D.append(x_B)

# Print vectors C and D

D = C
x_values_A = np.array(C)
x_values_B = np.array(D)


# Initialize vectors C and D for y-axis
C_y = []
D_y = []
print(f"Print nearest points for each peak in A and B using voigt")
# Print nearest points for each peak in A and B
for i, (point_A, point_B) in enumerate(zip(nearest_points_A, nearest_points_B), start=1):
    print(f"voigtPoint {i} - A: {point_A}, B: {point_B}")
    _, y_A, _ = point_A
    _, y_B, _ = point_B
    C_y.append(y_A)
    D_y.append(y_B)

# Print vectors C and D for y-axis
print("Vector C_y voigt:", C_y)
print("Vector D_y voigt:", D_y)
y_values_A = np.array(C_y)
y_values_B = np.array(D_y)

print("x coordinates of spectrum A peaks using voigt :", C)
print("x coordinates of spectrum B peaks using voigt:", D)



recreated_spectrum = recreate_spectrum(x_data_A, x_values_B, y_values_B)



# Plotting the recreated_spectrum and spectrum_A together with the scatter plot
plt.figure(figsize=(8, 6))

# Plot recreated_spectrum
plt.plot(x_data_A, recreated_spectrum, label='New spectrum B', color='green')

# Plot spectrum_A
plt.plot(x_data_A, spectrum_A, label='Spectrum A', color='orange')

# Plot points formed by x_values_A and y_values_A
plt.scatter(x_values_A, y_values_A, label='A', color='red')

# Plot points formed by x_values_B and y_values_B
plt.scatter(x_values_B, y_values_B, label='B', color='blue')

plt.xlabel('Wavenumber (m^-1)')
plt.ylabel('Intensity')
plt.title('Points A and B and Spectra')
plt.legend()
plt.show()
